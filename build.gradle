plugins {
	id 'java'
	id 'org.springframework.boot' version '2.7.10'
	id 'io.spring.dependency-management' version '1.0.15.RELEASE'
	id 'com.google.cloud.tools.jib' version '3.2.1'
	id "org.asciidoctor.jvm.convert" version "3.3.2"
	id 'com.ewerk.gradle.plugins.querydsl' version '1.0.10'
}

jib {
	from {
		image = "openjdk:17-alpine"
		auth {
			username = project.DOCKER_ID
			password = project.DOCKER_PASSWORD
		}
	}
	to {
		image = project.DOCKER_ID + "/" + project.DOCKER_IMAGE_NAME
		auth {
			username = project.DOCKER_ID
			password = project.DOCKER_PASSWORD
		}
		tags = ["latest"]
	}
	container {
		jvmFlags = ["-Xms128m", "-Xmx128m"]
	}
}

ext {
	queryDslVersion = "5.0.0"
}

group = 'tuk'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
	querydsl.extendsFrom compileClasspath
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter'

	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'

	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-webflux'

	implementation 'org.springframework.cloud:spring-cloud-starter-aws:2.2.6.RELEASE'
	implementation 'com.google.guava:guava:r05'
	implementation 'com.aventrix.jnanoid:jnanoid:2.0.0'
	testImplementation 'io.findify:s3mock_2.13:0.2.6'

	implementation 'org.mapstruct:mapstruct:1.5.1.Final'
	implementation 'org.projectlombok:lombok-mapstruct-binding:0.2.0'
	annotationProcessor "org.mapstruct:mapstruct-processor:1.5.1.Final"
	annotationProcessor "org.projectlombok:lombok-mapstruct-binding:0.2.0"

	runtimeOnly 'com.mysql:mysql-connector-j'
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
	annotationProcessor "org.springframework.boot:spring-boot-configuration-processor"

	// QueryDSL
	implementation "com.querydsl:querydsl-jpa:${queryDslVersion}"
	annotationProcessor(
			"javax.persistence:javax.persistence-api",
			"javax.annotation:javax.annotation-api",
			"com.querydsl:querydsl-apt:${queryDslVersion}:jpa")


	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
	testImplementation 'org.springframework.security:spring-security-test'
	testCompileOnly 'org.projectlombok:lombok'
	testAnnotationProcessor 'org.projectlombok:lombok'
}

def querydslDir = "$buildDir/generated/querydsl"
querydsl {
	jpa = true
	querydslSourcesDir = querydslDir
}
// QueryDSL
sourceSets {
	main {
		java {
			srcDirs = ["$projectDir/src/main/java", querydslDir]
		}
	}
}

configurations {
	querydsl.extendsFrom compileClasspath
}

compileQuerydsl {
	options.annotationProcessorPath = configurations.querydsl
}

ext {
	snippetsDir = file('build/generated-snippets')
}

bootJar {
	dependsOn asciidoctor
	from("${asciidoctor.outputDir}/html5")
	into 'static/docs'
}

asciidoctor {
	inputs.dir snippetsDir
	//configurations 'asciidoctorExt'
	dependsOn test
}

tasks.named('test') {
	outputs.dir snippetsDir
	useJUnitPlatform()
}

configurations {
	asciidoctorExtensions
	compileOnly {
		extendsFrom annotationProcessor
	}
}

compileJava {
	options.compilerArgs += [
			'-Amapstruct.suppressGeneratorTimestamp=true',
			'-Amapstruct.suppressGeneratorVersionInfoComment=true',
			'-Amapstruct.verbose=true'
	]
}